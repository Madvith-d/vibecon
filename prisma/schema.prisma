// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma (User model excerpt)
model User {
  id            String   @id @default(uuid())
  clerkId       String?  @unique  // Add this for Clerk user ID
  name          String
  email         String   @unique
  profileImage  String?
  bio           String?
  linkedIn      String?
  twitter       String?
  github        String?
  website       String?

  // Existing relationships...
  interests     Topic[]         @relation("UserInterests")
  posts         Post[]
  replies       Reply[]
  likes         Like[]
  replyLikes    ReplyLike[]
  followers     Follow[]        @relation("Followers")
  following     Follow[]        @relation("Following")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Topic {
  id      String  @id @default(uuid())
  name    String  @unique
  users   User[]  @relation("UserInterests")
}

model Post {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String     // Markdown content
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]      @relation("PostTags")
  replies     Reply[]
  likes       Like[]

  // For trending feed (likes + createdAt will be used in query)
}

model Reply {
  id          String     @id @default(uuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  post        Post       @relation(fields: [postId], references: [id])
  postId      String

  author      User       @relation(fields: [authorId], references: [id])
  authorId    String

  parentReply Reply?     @relation("ReplyThread", fields: [parentReplyId], references: [id])
  parentReplyId String?  

  subReplies  Reply[]    @relation("ReplyThread")
  likes       ReplyLike[]
}

model Tag {
  id      String   @id @default(uuid())
  name    String   @unique
  posts   Post[]   @relation("PostTags")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent multiple likes by same user
}

model ReplyLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reply     Reply    @relation(fields: [replyId], references: [id])
  replyId   String
  createdAt DateTime @default(now())

  @@unique([userId, replyId]) // Prevent multiple likes
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}